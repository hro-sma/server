// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using weather.station.server.Data;

namespace weather.station.server.Migrations
{
    [DbContext(typeof(WeatherStationServerContext))]
    [Migration("20181106162517_final")]
    partial class final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("weather.station.server.Models.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeviceName");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("StudentNumber");

                    b.HasKey("DeviceId");

                    b.ToTable("Device");

                    b.HasData(
                        new { DeviceId = new Guid("b7886e5a-515f-4c60-b45c-ecf9add01ea6"), DeviceName = "test", Latitude = 52.0, Longitude = 4.5, StudentNumber = "hjdcbs" },
                        new { DeviceId = new Guid("750de99f-c0d1-458e-8d26-ff4237bcdfd2"), DeviceName = "test", Latitude = 52.0, Longitude = 5.0, StudentNumber = "bla" }
                    );
                });

            modelBuilder.Entity("weather.station.server.Models.WeatherUpdate", b =>
                {
                    b.Property<Guid>("WeatherUpdateId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DeviceId");

                    b.Property<double>("Humidity");

                    b.Property<double>("TemperatureC");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<double>("Windspeed");

                    b.HasKey("WeatherUpdateId");

                    b.HasIndex("DeviceId");

                    b.ToTable("WeatherUpdate");

                    b.HasData(
                        new { WeatherUpdateId = new Guid("a598b97e-162d-4b68-a2a9-4e831d0fc90d"), DeviceId = new Guid("b7886e5a-515f-4c60-b45c-ecf9add01ea6"), Humidity = 5.0, TemperatureC = 10.0, TimeStamp = new DateTime(2018, 11, 6, 17, 25, 17, 209, DateTimeKind.Local), Windspeed = 5.0 },
                        new { WeatherUpdateId = new Guid("e5fd6bb4-792b-44fc-8966-9e50b663ebe3"), DeviceId = new Guid("750de99f-c0d1-458e-8d26-ff4237bcdfd2"), Humidity = 5.0, TemperatureC = 10.0, TimeStamp = new DateTime(2018, 11, 6, 17, 25, 17, 210, DateTimeKind.Local), Windspeed = 5.0 }
                    );
                });

            modelBuilder.Entity("weather.station.server.Models.WeatherUpdate", b =>
                {
                    b.HasOne("weather.station.server.Models.Device", "Device")
                        .WithMany("WeatherUpdates")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
