// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using weather.station.server.Data;

namespace weather.station.server.Migrations
{
    [DbContext(typeof(WeatherStationServerContext))]
    [Migration("20181107184502_final")]
    partial class final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("weather.station.server.Models.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeviceName");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("StudentNumber");

                    b.HasKey("DeviceId");

                    b.ToTable("Device");

                    b.HasData(
                        new { DeviceId = new Guid("0cd895f4-6713-41ab-b7dc-3229bacf30a9"), DeviceName = "test", Latitude = 52.0, Longitude = 4.5, StudentNumber = "hjdcbs" },
                        new { DeviceId = new Guid("b569148b-19ff-4fa9-9c8b-2d8d41223704"), DeviceName = "test", Latitude = 52.0, Longitude = 5.0, StudentNumber = "bla" }
                    );
                });

            modelBuilder.Entity("weather.station.server.Models.WeatherUpdate", b =>
                {
                    b.Property<Guid>("WeatherUpdateId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DeviceId");

                    b.Property<double>("Humidity");

                    b.Property<double>("TemperatureC");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<double>("Windspeed");

                    b.HasKey("WeatherUpdateId");

                    b.HasIndex("DeviceId");

                    b.ToTable("WeatherUpdate");

                    b.HasData(
                        new { WeatherUpdateId = new Guid("038ae1f2-18df-41a4-9e57-03450a0dab7d"), DeviceId = new Guid("0cd895f4-6713-41ab-b7dc-3229bacf30a9"), Humidity = 5.0, TemperatureC = 10.0, TimeStamp = new DateTime(2018, 11, 7, 19, 44, 51, 801, DateTimeKind.Local), Windspeed = 5.0 },
                        new { WeatherUpdateId = new Guid("d7dff818-22a2-418e-a696-8875748afe98"), DeviceId = new Guid("b569148b-19ff-4fa9-9c8b-2d8d41223704"), Humidity = 5.0, TemperatureC = 10.0, TimeStamp = new DateTime(2018, 11, 7, 19, 44, 51, 804, DateTimeKind.Local), Windspeed = 5.0 }
                    );
                });

            modelBuilder.Entity("weather.station.server.Models.WeatherUpdate", b =>
                {
                    b.HasOne("weather.station.server.Models.Device", "Device")
                        .WithMany("WeatherUpdates")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
